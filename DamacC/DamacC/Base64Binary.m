//------------------------------------------------------------------------------
// <wsdl2code-generated>
// This code was generated by http://www.wsdl2code.com iPhone version 2.1
// Date Of Creation: 10/3/2018 10:15:47 AM
//
//  Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code Version
//

#import "Base64Binary.h" 


@implementation Base64Binary

-(id)initWithArray:(NSArray*)array {
    self = [super init];
    if (self) {
        @try {
            for (int i0 = 0; i0 < [array count]; i0++)
            {
                if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"base64Binary"]==NSOrderedSame)){
                    NSString* stringData = [[array  objectAtIndex:i0] objectForKey:@"nodeContent"];
                    NSData* nodeContentValue = [NSData dataFromBase64String:stringData];
                    [self setBase64Binary:nodeContentValue];
                }
            }
        }
        @catch(NSException *ex){
        }
    }
    return self;
}
-(NSString*)toString:(BOOL)addNameWrap {
    NSMutableString *nsString = [NSMutableString string];
    if (addNameWrap == YES)
        [nsString appendString:@"<Base64Binary>" ];
    if (self.base64Binary != nil) {
        [nsString appendFormat:@"<base64Binary>%@</base64Binary>",[self.base64Binary base64EncodedString]];
    }
    if (addNameWrap == YES)
        [nsString appendString:@"</Base64Binary>" ];
    return nsString;
}
#pragma mark - NSCoding
-(id)initWithCoder:(NSCoder *)decoder{
    self = [super init];
    if (self){
        self.base64Binary = [decoder decodeObjectForKey:@"base64Binary"];
    }
    return self;
}
-(void)encodeWithCoder:(NSCoder *)encoder{
    [encoder encodeObject:self.base64Binary forKey:@"base64Binary"];
}
-(id)copyWithZone:(NSZone *)zone {
    Base64Binary *finalCopy = [[[self class] allocWithZone: zone] init];
    
    NSData *cpy1 = [self.base64Binary copy];
    finalCopy.base64Binary = cpy1;
    
    return finalCopy;
}

@end
