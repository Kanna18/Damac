//------------------------------------------------------------------------------
// <wsdl2code-generated>
// This code was generated by http://www.wsdl2code.com iPhone version 2.1
// Date Of Creation: 10/3/2018 10:15:47 AM
//
//  Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code Version
//

#import "DocUploadDTO.h" 


@implementation DocUploadDTO

-(id)initWithArray:(NSArray*)array {
    self = [super init];
    if (self) {
        @try {
            for (int i0 = 0; i0 < [array count]; i0++)
            {
                if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"category"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setCategory:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"entityName"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setEntityName:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeChildArray"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"fileBinary"]==NSOrderedSame)){
                    NSArray* arrayXml = [[array  objectAtIndex:i0] objectForKey:@"nodeChildArray"];
                    Base64Binary* nodeContentValue = [[Base64Binary alloc] initWithArray:arrayXml];
                    [self setFileBinary:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"fileDescription"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setFileDescription:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"fileId"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setFileId:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"fileName"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setFileName:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"registrationId"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setRegistrationId:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"sourceFileName"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setSourceFileName:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"sourceId"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setSourceId:nodeContentValue];
                }
            }
        }
        @catch(NSException *ex){
        }
    }
    return self;
}
-(NSString*)toString:(BOOL)addNameWrap {
    NSMutableString *nsString = [NSMutableString string];
    if (addNameWrap == YES)
        [nsString appendString:@"<DocUploadDTO>" ];
    if (self.category != nil) {
        [nsString appendFormat:@"<category>%@</category>" , [self category]];
    }
    if (self.entityName != nil) {
        [nsString appendFormat:@"<entityName>%@</entityName>" , [self entityName]];
    }
    if (self.fileBinary != nil) {
        [nsString appendFormat:@"<fileBinary>%@</fileBinary>" , [self.fileBinary toString:NO]];
    }
    if (self.fileDescription != nil) {
        [nsString appendFormat:@"<fileDescription>%@</fileDescription>" , [self fileDescription]];
    }
    if (self.fileId != nil) {
        [nsString appendFormat:@"<fileId>%@</fileId>" , [self fileId]];
    }
    if (self.fileName != nil) {
        [nsString appendFormat:@"<fileName>%@</fileName>" , [self fileName]];
    }
    if (self.registrationId != nil) {
        [nsString appendFormat:@"<registrationId>%@</registrationId>" , [self registrationId]];
    }
    if (self.sourceFileName != nil) {
        [nsString appendFormat:@"<sourceFileName>%@</sourceFileName>" , [self sourceFileName]];
    }
    if (self.sourceId != nil) {
        [nsString appendFormat:@"<sourceId>%@</sourceId>" , [self sourceId]];
    }
    if (addNameWrap == YES)
        [nsString appendString:@"</DocUploadDTO>" ];
    return nsString;
}
#pragma mark - NSCoding
-(id)initWithCoder:(NSCoder *)decoder{
    self = [super init];
    if (self){
        self.category = [decoder decodeObjectForKey:@"category"];
        self.entityName = [decoder decodeObjectForKey:@"entityName"];
        self.fileBinary = [decoder decodeObjectForKey:@"fileBinary"];
        self.fileDescription = [decoder decodeObjectForKey:@"fileDescription"];
        self.fileId = [decoder decodeObjectForKey:@"fileId"];
        self.fileName = [decoder decodeObjectForKey:@"fileName"];
        self.registrationId = [decoder decodeObjectForKey:@"registrationId"];
        self.sourceFileName = [decoder decodeObjectForKey:@"sourceFileName"];
        self.sourceId = [decoder decodeObjectForKey:@"sourceId"];
    }
    return self;
}
-(void)encodeWithCoder:(NSCoder *)encoder{
    [encoder encodeObject:self.category forKey:@"category"];
    [encoder encodeObject:self.entityName forKey:@"entityName"];
    [encoder encodeObject:self.fileBinary forKey:@"fileBinary"];
    [encoder encodeObject:self.fileDescription forKey:@"fileDescription"];
    [encoder encodeObject:self.fileId forKey:@"fileId"];
    [encoder encodeObject:self.fileName forKey:@"fileName"];
    [encoder encodeObject:self.registrationId forKey:@"registrationId"];
    [encoder encodeObject:self.sourceFileName forKey:@"sourceFileName"];
    [encoder encodeObject:self.sourceId forKey:@"sourceId"];
}
-(id)copyWithZone:(NSZone *)zone {
    DocUploadDTO *finalCopy = [[[self class] allocWithZone: zone] init];
    
    NSString *copy1 = [self.category copy];
    finalCopy.category = copy1;
    
    NSString *copy2 = [self.entityName copy];
    finalCopy.entityName = copy2;
    
    Base64Binary *copy3 = [self.fileBinary copy];
    finalCopy.fileBinary = copy3;
    
    NSString *copy4 = [self.fileDescription copy];
    finalCopy.fileDescription = copy4;
    
    NSString *copy5 = [self.fileId copy];
    finalCopy.fileId = copy5;
    
    NSString *copy6 = [self.fileName copy];
    finalCopy.fileName = copy6;
    
    NSString *copy7 = [self.registrationId copy];
    finalCopy.registrationId = copy7;
    
    NSString *copy8 = [self.sourceFileName copy];
    finalCopy.sourceFileName = copy8;
    
    NSString *copy9 = [self.sourceId copy];
    finalCopy.sourceId = copy9;
    
    return finalCopy;
}

@end
